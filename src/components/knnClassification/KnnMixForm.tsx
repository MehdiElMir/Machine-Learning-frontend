import React, { useEffect } from "react";
import type { GetProp } from "antd";
import {
  Button,
  Checkbox,
  Col,
  Form,
  InputNumber,
  Radio,
  Row,
  Select,
  Tooltip,
  type FormProps,
} from "antd";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../../store/store";
import {
  deletingSelectedColumns,
  imputateSelectedColumns,
} from "../../store/slices/dataInfoSlice";
import {
  DeleteFilled,
  PlusCircleFilled,
  QuestionCircleOutlined,
} from "@ant-design/icons";
import {
  crossValidation,
  decisionTree,
  knnClassification,
  knnRegressionMix,
  linearRegression2D,
} from "../../store/slices/linearRegressionSlice";
import { AiFillPlayCircle } from "react-icons/ai";

type FieldType = {
  column?: string;
  spotted_feature?: string;
  target?: string;
  n_neighbors?: string;
};

interface Props {
  setPlotData: React.Dispatch<any>;
}

const KnnMixForm: React.FC<Props> = ({ setPlotData }) => {
  const {
    data: { categorical_columns_names, dataset, numeric_columns_names },
  } = useSelector((state: RootState) => state.dataInfo);
  const [form] = Form.useForm();
  const dispatch = useDispatch();

  const dynamiqueOptions: any = [];

  categorical_columns_names.forEach((o) => {
    dynamiqueOptions.push({ label: o, value: o });
  });

  const dynamiquenumericOptions: any = [];

  numeric_columns_names.forEach((o) => {
    dynamiquenumericOptions.push({ label: o, value: o });
  });

  const onFinish: FormProps<FieldType>["onFinish"] = async (values) => {
    console.log(values);
    const requestBody = {
      dataset: dataset,
      column: values.column,
      target: values.target,
      spotted_feature: values.spotted_feature,
      n_neighbors: values.n_neighbors,
    };
    console.log(requestBody);
    const response = await dispatch(knnRegressionMix(requestBody));
    setPlotData(response.payload.plot_data);
    form.resetFields();
  };
  const onFinishFailed: FormProps<FieldType>["onFinishFailed"] = (
    errorInfo
  ) => {
    console.log("Failed:", errorInfo);
  };

  return (
    <Form
      layout="vertical"
      name="KnnMixForm"
      style={{
        width: "100%",
        padding: "10px",
        background: `linear-gradient(white, white) padding-box,
      linear-gradient(to right, #11b8fc, #6047ed) border-box`,
        border: "3px dashed #ffffff",
        borderRadius: "7px",
      }}
      onFinish={onFinish}
      onFinishFailed={onFinishFailed}
      autoComplete="off"
    >
      <p style={{ textAlign: "center", fontSize: "1.2rem", color: "#6047ed" }}>
        Knn Regression Comparaison{" "}
        <Tooltip
          color="#6047ed"
          overlayInnerStyle={{ width: "400px" }}
          title="The result will demonstrate the use of K-Nearest Neighbors (KNN) regression with two different weighting schemes: Uniform and Distance. KNN regression predicts the target variable by averaging the values of its nearest neighbors. In the Uniform scheme, all neighbors have equal weight in the prediction, while in the Distance scheme, closer neighbors have more influence. The colored points represent the data, with an additional feature highlighted. The lines show the regression curves generated by each KNN model. This visualization helps understand how different weighting schemes impact the regression predictions."
        >
          <QuestionCircleOutlined />
        </Tooltip>
      </p>
      <Row gutter={[16, 16]} justify={"space-around"}>
        <Col span={6}>
          <Form.Item<FieldType>
            label="Featue"
            name="column"
            rules={[{ required: true, message: "Please select a feature" }]}
          >
            <Select options={dynamiquenumericOptions} />
          </Form.Item>
        </Col>
        <Col span={6}>
          <Form.Item<FieldType>
            label="Target"
            name="target"
            rules={[{ required: true, message: "Please select a target" }]}
          >
            <Select options={dynamiquenumericOptions} />
          </Form.Item>
        </Col>
        <Col span={6}>
          <Form.Item<FieldType>
            label="Spotted feature"
            name="spotted_feature"
            rules={[
              { required: true, message: "Please select a spotted feature" },
            ]}
          >
            <Select options={dynamiqueOptions} />
          </Form.Item>
        </Col>
        <Col span={6}>
          <Form.Item<FieldType>
            label="N-Neighbors"
            name="n_neighbors"
            rules={[{ required: true, message: "Please enter a number" }]}
          >
            <InputNumber />
          </Form.Item>
        </Col>
      </Row>
      <Form.Item wrapperCol={{ span: 24 }}>
        <Row justify={"end"}>
          <Button icon={<AiFillPlayCircle />} type="primary" htmlType="submit">
            Generate
          </Button>
        </Row>
      </Form.Item>
    </Form>
  );
};

export default KnnMixForm;
